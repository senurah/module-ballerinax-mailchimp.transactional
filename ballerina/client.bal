// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;

public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "https://mandrillapp.com/api/1.0") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Add email to allowlist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post allowlists/add(AllowlistsAddBody payload, map<string|string[]> headers = {}) returns InlineResponse200|error {
        string resourcePath = string `/allowlists/add`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List allowlisted emails
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post allowlists/list(AllowlistsListBody payload, map<string|string[]> headers = {}) returns InlineResponse2001[]|error {
        string resourcePath = string `/allowlists/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove email from allowlist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post allowlists/delete(AllowlistsDeleteBody payload, map<string|string[]> headers = {}) returns InlineResponse2002|error {
        string resourcePath = string `/allowlists/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # View export info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post exports/info(ExportsInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse2003|error {
        string resourcePath = string `/exports/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List exports
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post exports/list(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse2004[]|error {
        string resourcePath = string `/exports/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Export denylist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post exports/rejects(ExportsRejectsBody payload, map<string|string[]> headers = {}) returns InlineResponse2005|error {
        string resourcePath = string `/exports/rejects`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Export Allowlist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post exports/whitelist(ExportsRejectsBody payload, map<string|string[]> headers = {}) returns InlineResponse2006|error {
        string resourcePath = string `/exports/whitelist`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Export Allowlist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post exports/allowlist(ExportsRejectsBody payload, map<string|string[]> headers = {}) returns InlineResponse2006|error {
        string resourcePath = string `/exports/allowlist`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Export activity history
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post exports/activity(ExportsActivityBody payload, map<string|string[]> headers = {}) returns InlineResponse2007|error {
        string resourcePath = string `/exports/activity`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List inbound domains
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/domains(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse2008[]|error {
        string resourcePath = string `/inbound/domains`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add inbound domain
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/add\-domain(InboundAddDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse2009|error {
        string resourcePath = string `/inbound/add-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Check domain settings
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/check\-domain(InboundCheckDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse20010|error {
        string resourcePath = string `/inbound/check-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete inbound domain
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/delete\-domain(InboundCheckDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse20011|error {
        string resourcePath = string `/inbound/delete-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List mailbox routes
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/routes(InboundRoutesBody payload, map<string|string[]> headers = {}) returns InlineResponse20012[]|error {
        string resourcePath = string `/inbound/routes`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add mailbox route
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/add\-route(InboundAddRouteBody payload, map<string|string[]> headers = {}) returns InlineResponse20013|error {
        string resourcePath = string `/inbound/add-route`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update mailbox route
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/update\-route(InboundUpdateRouteBody payload, map<string|string[]> headers = {}) returns InlineResponse20014|error {
        string resourcePath = string `/inbound/update-route`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete mailbox route
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/delete\-route(InboundDeleteRouteBody payload, map<string|string[]> headers = {}) returns InlineResponse20015|error {
        string resourcePath = string `/inbound/delete-route`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Send mime document
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post inbound/send\-raw(InboundSendRawBody payload, map<string|string[]> headers = {}) returns InlineResponse20016[]|error {
        string resourcePath = string `/inbound/send-raw`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List ip addresses
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/list(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20017[]|error {
        string resourcePath = string `/ips/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get ip info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/info(IpsInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20018|error {
        string resourcePath = string `/ips/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Request additional ip
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/provision(IpsProvisionBody payload, map<string|string[]> headers = {}) returns InlineResponse20019|error {
        string resourcePath = string `/ips/provision`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Start ip warmup
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/start\-warmup(IpsStartWarmupBody payload, map<string|string[]> headers = {}) returns InlineResponse20020|error {
        string resourcePath = string `/ips/start-warmup`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancel ip warmup
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/cancel\-warmup(IpsStartWarmupBody payload, map<string|string[]> headers = {}) returns InlineResponse20020|error {
        string resourcePath = string `/ips/cancel-warmup`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Move ip to different pool
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/set\-pool(IpsSetPoolBody payload, map<string|string[]> headers = {}) returns InlineResponse20021|error {
        string resourcePath = string `/ips/set-pool`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete ip address
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/delete(IpsDeleteBody payload, map<string|string[]> headers = {}) returns InlineResponse20022|error {
        string resourcePath = string `/ips/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List ip pools
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/list\-pools(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20023[]|error {
        string resourcePath = string `/ips/list-pools`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get ip pool info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/pool\-info(IpsPoolInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20024|error {
        string resourcePath = string `/ips/pool-info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add ip pool
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/create\-pool(IpsCreatePoolBody payload, map<string|string[]> headers = {}) returns InlineResponse20024|error {
        string resourcePath = string `/ips/create-pool`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete ip pool
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/delete\-pool(IpsDeletePoolBody payload, map<string|string[]> headers = {}) returns InlineResponse20025|error {
        string resourcePath = string `/ips/delete-pool`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Test custom dns
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/check\-custom\-dns(IpsCheckCustomDnsBody payload, map<string|string[]> headers = {}) returns InlineResponse20026|error {
        string resourcePath = string `/ips/check-custom-dns`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Set custom dns
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post ips/set\-custom\-dns(IpsSetCustomDnsBody payload, map<string|string[]> headers = {}) returns InlineResponse20027|error {
        string resourcePath = string `/ips/set-custom-dns`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Send new message
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/send(MessagesSendBody payload, map<string|string[]> headers = {}) returns InlineResponse20028[]|error {
        string resourcePath = string `/messages/send`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Send using message template
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/send\-template(MessagesSendTemplateBody payload, map<string|string[]> headers = {}) returns InlineResponse20029[]|error {
        string resourcePath = string `/messages/send-template`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Search messages by date
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/search(MessagesSearchBody payload, map<string|string[]> headers = {}) returns InlineResponse20030[]|error {
        string resourcePath = string `/messages/search`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Search messages by hour
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/search\-time\-series(MessagesSearchTimeSeriesBody payload, map<string|string[]> headers = {}) returns InlineResponse20031[]|error {
        string resourcePath = string `/messages/search-time-series`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get message info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/info(MessagesInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20032|error {
        string resourcePath = string `/messages/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get message content
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/content(MessagesInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20033|error {
        string resourcePath = string `/messages/content`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Parse mime document
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/parse(MessagesParseBody payload, map<string|string[]> headers = {}) returns InlineResponse20034|error {
        string resourcePath = string `/messages/parse`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Send mime document
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/send\-raw(MessagesSendRawBody payload, map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/messages/send-raw`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List scheduled emails
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/list\-scheduled(MessagesListScheduledBody payload, map<string|string[]> headers = {}) returns InlineResponse20035[]|error {
        string resourcePath = string `/messages/list-scheduled`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancel scheduled email
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/cancel\-scheduled(MessagesCancelScheduledBody payload, map<string|string[]> headers = {}) returns InlineResponse20035[]|error {
        string resourcePath = string `/messages/cancel-scheduled`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Reschedule email
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post messages/reschedule(MessagesRescheduleBody payload, map<string|string[]> headers = {}) returns InlineResponse20035[]|error {
        string resourcePath = string `/messages/reschedule`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List metadata fields
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post metadata/list(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20036[]|error {
        string resourcePath = string `/metadata/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add metadata field
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post metadata/add(MetadataAddBody payload, map<string|string[]> headers = {}) returns InlineResponse20037|error {
        string resourcePath = string `/metadata/add`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update metadata field
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post metadata/update(MetadataUpdateBody payload, map<string|string[]> headers = {}) returns InlineResponse20038|error {
        string resourcePath = string `/metadata/update`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete metadata field
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post metadata/delete(MetadataDeleteBody payload, map<string|string[]> headers = {}) returns InlineResponse20039|error {
        string resourcePath = string `/metadata/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add email to denylist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post rejects/add(RejectsAddBody payload, map<string|string[]> headers = {}) returns InlineResponse20040|error {
        string resourcePath = string `/rejects/add`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List denylisted emails
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post rejects/list(RejectsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20041[]|error {
        string resourcePath = string `/rejects/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete email from denylist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post rejects/delete(RejectsDeleteBody payload, map<string|string[]> headers = {}) returns InlineResponse20042|error {
        string resourcePath = string `/rejects/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List account senders
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post senders/list(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20043[]|error {
        string resourcePath = string `/senders/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List sender domains
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post senders/domains(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20044[]|error {
        string resourcePath = string `/senders/domains`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add sender domain
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post senders/add\-domain(SendersAddDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse20045|error {
        string resourcePath = string `/senders/add-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Check domain settings
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post senders/check\-domain(SendersAddDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse20046|error {
        string resourcePath = string `/senders/check-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Verify domain
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post senders/verify\-domain(SendersVerifyDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse20047|error {
        string resourcePath = string `/senders/verify-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get sender info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post senders/info(SendersInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20048|error {
        string resourcePath = string `/senders/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # View sender history
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post senders/time\-series(SendersInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20049[]|error {
        string resourcePath = string `/senders/time-series`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List subaccounts
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post subaccounts/list(SubaccountsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20050[]|error {
        string resourcePath = string `/subaccounts/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add subaccount
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post subaccounts/add(SubaccountsAddBody payload, map<string|string[]> headers = {}) returns InlineResponse20051|error {
        string resourcePath = string `/subaccounts/add`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get subaccount info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post subaccounts/info(SubaccountsInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20052|error {
        string resourcePath = string `/subaccounts/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update subaccount
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post subaccounts/update(SubaccountsUpdateBody payload, map<string|string[]> headers = {}) returns InlineResponse20053|error {
        string resourcePath = string `/subaccounts/update`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete subaccount
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post subaccounts/delete(SubaccountsDeleteBody payload, map<string|string[]> headers = {}) returns InlineResponse20054|error {
        string resourcePath = string `/subaccounts/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Pause subaccount
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post subaccounts/pause(SubaccountsPauseBody payload, map<string|string[]> headers = {}) returns InlineResponse20055|error {
        string resourcePath = string `/subaccounts/pause`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Resume subaccount
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post subaccounts/resume(SubaccountsResumeBody payload, map<string|string[]> headers = {}) returns InlineResponse20056|error {
        string resourcePath = string `/subaccounts/resume`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List tags
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post tags/list(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20057[]|error {
        string resourcePath = string `/tags/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete tag
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post tags/delete(TagsDeleteBody payload, map<string|string[]> headers = {}) returns InlineResponse20058|error {
        string resourcePath = string `/tags/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get tag info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post tags/info(TagsInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20059|error {
        string resourcePath = string `/tags/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # View tag history
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post tags/time\-series(TagsInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20031[]|error {
        string resourcePath = string `/tags/time-series`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # View all tags history
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post tags/all\-time\-series(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20031[]|error {
        string resourcePath = string `/tags/all-time-series`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add template
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/add(TemplatesAddBody payload, map<string|string[]> headers = {}) returns InlineResponse20060|error {
        string resourcePath = string `/templates/add`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get template info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/info(TemplatesInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20061|error {
        string resourcePath = string `/templates/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update template
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/update(TemplatesUpdateBody payload, map<string|string[]> headers = {}) returns InlineResponse20062|error {
        string resourcePath = string `/templates/update`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Publish template content
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/publish(TemplatesInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20063|error {
        string resourcePath = string `/templates/publish`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete template
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/delete(TemplatesInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20064|error {
        string resourcePath = string `/templates/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List templates
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/list(TemplatesListBody payload, map<string|string[]> headers = {}) returns InlineResponse20065[]|error {
        string resourcePath = string `/templates/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get template history
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/time\-series(TemplatesTimeSeriesBody payload, map<string|string[]> headers = {}) returns InlineResponse20049[]|error {
        string resourcePath = string `/templates/time-series`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Render html template
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post templates/render(TemplatesRenderBody payload, map<string|string[]> headers = {}) returns InlineResponse20066|error {
        string resourcePath = string `/templates/render`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List most clicked urls
    #
    # + headers - Headers to be sent with the request 
    # 
    # # Deprecated
    @deprecated
    resource isolated function post urls/list(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20067[]|error {
        string resourcePath = string `/urls/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Search most clicked urls
    #
    # + headers - Headers to be sent with the request 
    # 
    # # Deprecated
    @deprecated
    resource isolated function post urls/search(UrlsSearchBody payload, map<string|string[]> headers = {}) returns InlineResponse20068[]|error {
        string resourcePath = string `/urls/search`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get url history
    #
    # + headers - Headers to be sent with the request 
    # 
    # # Deprecated
    @deprecated
    resource isolated function post urls/time\-series(UrlsTimeSeriesBody payload, map<string|string[]> headers = {}) returns InlineResponse20069[]|error {
        string resourcePath = string `/urls/time-series`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List tracking domains
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post urls/tracking\-domains(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20070[]|error {
        string resourcePath = string `/urls/tracking-domains`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add tracking domains
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post urls/add\-tracking\-domain(SendersAddDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse20071|error {
        string resourcePath = string `/urls/add-tracking-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Check cname settings
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post urls/check\-tracking\-domain(UrlsCheckTrackingDomainBody payload, map<string|string[]> headers = {}) returns InlineResponse20071|error {
        string resourcePath = string `/urls/check-tracking-domain`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get user info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post users/info(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20072|error {
        string resourcePath = string `/users/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Ping
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post users/ping(ExportsListBody payload, map<string|string[]> headers = {}) returns string|error {
        string resourcePath = string `/users/ping`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Ping 2
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post users/ping2(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20073|error {
        string resourcePath = string `/users/ping2`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List account senders
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post users/senders(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20043[]|error {
        string resourcePath = string `/users/senders`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List webhooks
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post webhooks/list(ExportsListBody payload, map<string|string[]> headers = {}) returns InlineResponse20074[]|error {
        string resourcePath = string `/webhooks/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add webhook
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post webhooks/add(WebhooksAddBody payload, map<string|string[]> headers = {}) returns InlineResponse20075|error {
        string resourcePath = string `/webhooks/add`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get webhook info
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post webhooks/info(WebhooksInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20076|error {
        string resourcePath = string `/webhooks/info`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update webhook
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post webhooks/update(WebhooksUpdateBody payload, map<string|string[]> headers = {}) returns InlineResponse20077|error {
        string resourcePath = string `/webhooks/update`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete webhook
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post webhooks/delete(WebhooksInfoBody payload, map<string|string[]> headers = {}) returns InlineResponse20078|error {
        string resourcePath = string `/webhooks/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add email to allowlist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post whitelists/add(AllowlistsAddBody payload, map<string|string[]> headers = {}) returns InlineResponse200|error {
        string resourcePath = string `/whitelists/add`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List allowlisted emails
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post whitelists/list(AllowlistsListBody payload, map<string|string[]> headers = {}) returns InlineResponse2001[]|error {
        string resourcePath = string `/whitelists/list`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove email from allowlist
    #
    # + headers - Headers to be sent with the request 
    resource isolated function post whitelists/delete(AllowlistsDeleteBody payload, map<string|string[]> headers = {}) returns InlineResponse2002|error {
        string resourcePath = string `/whitelists/delete`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
